#!/usr/bin/env python3
"""
This script uses the browser_cookies3 module to extract cookies directly
from your browser and save them in the Netscape format for yt-dlp.
"""

import os
import argparse
import sys
import subprocess
from pathlib import Path
import tempfile

# Note: You'll need to install the browser_cookie3 module:
# pip install browser-cookie3

def save_cookies(browser_name, cookie_file, all_cookies=False, test_url=None):
    """
    Extract cookies from browser and save to file.
    
    Args:
        browser_name (str): Name of the browser to extract cookies from
        cookie_file (str): Path to save cookies file
        all_cookies (bool): Whether to save all cookies or just YouTube-related ones
        test_url (str): Optional YouTube URL to test the cookies with
    """
    try:
        # Dynamic import so the script doesn't fail if the module isn't installed
        import browser_cookie3
    except ImportError:
        print("Error: browser_cookie3 module not found.")
        print("Please install it using: pip install browser-cookie3")
        return False

    # Map browser names to browser_cookie3 functions
    browser_functions = {
        "chrome": browser_cookie3.chrome,
        "firefox": browser_cookie3.firefox,
        "opera": browser_cookie3.opera,
        "edge": browser_cookie3.edge,
        "chromium": browser_cookie3.chromium,
        "brave": browser_cookie3.brave,
        "vivaldi": browser_cookie3.vivaldi,
        "safari": browser_cookie3.safari
    }

    if browser_name not in browser_functions:
        print(f"Error: Browser '{browser_name}' not supported.")
        return False

    try:
        # Get cookies from the browser
        print(f"Extracting cookies from {browser_name}...")
        cj = browser_functions[browser_name]()
        
        # Create directory for cookie file if needed
        cookie_dir = os.path.dirname(cookie_file)
        if cookie_dir:
            os.makedirs(cookie_dir, exist_ok=True)
        
        # YouTube-related domains
        youtube_domains = [
            ".youtube.com", 
            "youtube.com", 
            ".googlevideo.com", 
            ".ytimg.com", 
            ".google.com",
            "google.com", 
            ".ggpht.com"
        ]
        
        # Filter for only specific cookies or all cookies
        cookies_count = 0
        with open(cookie_file, 'w') as f:
            f.write("# Netscape HTTP Cookie File\n")
            f.write(f"# This file was generated by yt-dlp-cookie-saver.py from {browser_name}\n")
            f.write("# https://github.com/yt-dlp/yt-dlp\n\n")
            
            for cookie in cj:
                save_cookie = False
                
                if all_cookies:
                    save_cookie = True
                else:
                    # Only save YouTube-related cookies
                    if any(domain in cookie.domain for domain in youtube_domains):
                        save_cookie = True
                
                if save_cookie:
                    domain = cookie.domain if cookie.domain.startswith('.') else '.' + cookie.domain
                    secure = "TRUE" if cookie.secure else "FALSE"
                    http_only = "TRUE" if cookie.has_nonstandard_attr('HttpOnly') else "FALSE"
                    expires = int(cookie.expires) if cookie.expires else 0
                    
                    f.write(f"{domain}\tTRUE\t{cookie.path}\t{secure}\t{expires}\t{cookie.name}\t{cookie.value}\n")
                    cookies_count += 1
        
        if os.path.exists(cookie_file) and os.path.getsize(cookie_file) > 0:
            print(f"Cookies successfully saved to {cookie_file}")
            print(f"Saved {cookies_count} cookies")
            
            # Test the cookies if a URL is provided
            if test_url:
                return test_cookies(cookie_file, test_url)
            return True
        else:
            print("Cookie file was created but appears to be empty.")
            return False
            
    except Exception as e:
        print(f"Error extracting cookies: {e}")
        return False

def test_cookies(cookie_file, test_url):
    """Test the cookies with a YouTube URL."""
    print(f"\nTesting cookies with URL: {test_url}")
    
    # Create a temporary file for yt-dlp output
    with tempfile.NamedTemporaryFile(delete=False) as temp:
        temp_name = temp.name
    
    try:
        cmd = [
            "yt-dlp", 
            "--cookies", cookie_file,
            "--skip-download",
            "--no-warnings",
            "--print", "title",
            test_url
        ]
        
        print(f"Running: {' '.join(cmd)}")
        
        # Run yt-dlp with cookies
        result = subprocess.run(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=False
        )
        
        # Check if the command was successful
        if result.returncode == 0:
            title = result.stdout.strip()
            print(f"Cookie test successful! Video title: {title}")
            return True
        else:
            print(f"Cookie test failed with error:")
            print(result.stderr.strip())
            return False
            
    except Exception as e:
        print(f"Error testing cookies: {e}")
        return False
    finally:
        # Remove the temporary file
        if os.path.exists(temp_name):
            os.unlink(temp_name)

def main():
    # Set up argument parser
    parser = argparse.ArgumentParser(description="Save browser cookies for use with yt-dlp")
    
    parser.add_argument(
        "browser",
        nargs="?",
        choices=["chrome", "firefox", "safari", "edge", "opera", "brave", "vivaldi", "chromium"],
        default="chrome",
        help="Browser to extract cookies from (default: chrome)"
    )
    
    parser.add_argument(
        "--output", "-o",
        default="cookies.txt",
        help="Path to save cookies file (default: ./cookies.txt in current directory)"
    )
    
    parser.add_argument(
        "--all-cookies", "-a",
        action="store_true",
        help="Save all cookies, not just YouTube-related ones"
    )
    
    parser.add_argument(
        "--test", "-t",
        help="Test the cookies with a YouTube URL (e.g., https://www.youtube.com/watch?v=dQw4w9WgXcQ)"
    )
    
    args = parser.parse_args()
    
    # Save the cookies
    success = save_cookies(args.browser, args.output, args.all_cookies, args.test)
    
    if success:
        print(f"\nTo use these cookies with yt-dlp, run:")
        print(f"yt-dlp --cookies {args.output} [URL]")
    else:
        sys.exit(1)

if __name__ == "__main__":
    main()